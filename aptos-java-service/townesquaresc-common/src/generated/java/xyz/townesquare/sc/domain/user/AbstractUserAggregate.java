// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.domain.user;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import xyz.townesquare.sc.domain.*;
import xyz.townesquare.sc.specialization.*;

public abstract class AbstractUserAggregate extends AbstractAggregate implements UserAggregate {
    private UserState.MutableUserState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractUserAggregate(UserState state) {
        this.state = (UserState.MutableUserState)state;
    }

    public UserState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        UserCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleUserAggregate extends AbstractUserAggregate {
        public SimpleUserAggregate(UserState state) {
            super(state);
        }

        @Override
        public void create(String username, String profileImage, String bio, Long offChainVersion, String commandId, String requesterId, UserCommands.Create c) {
            try {
                verifyCreate(username, profileImage, bio, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newUserCreated(username, profileImage, bio, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void update(String username, String profileImage, String bio, Long offChainVersion, String commandId, String requesterId, UserCommands.Update c) {
            try {
                verifyUpdate(username, profileImage, bio, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newUserUpdated(username, profileImage, bio, offChainVersion, commandId, requesterId);
            apply(e);
        }

        protected void verifyCreate(String username, String profileImage, String bio, UserCommands.Create c) {
            String Username = username;
            String ProfileImage = profileImage;
            String Bio = bio;

            ReflectUtils.invokeStaticMethod(
                    "xyz.townesquare.sc.domain.user.CreateLogic",
                    "verify",
                    new Class[]{UserState.class, String.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), username, profileImage, bio, VerificationContext.forCommand(c)}
            );

//package xyz.townesquare.sc.domain.user;
//
//public class CreateLogic {
//    public static void verify(UserState userState, String username, String profileImage, String bio, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyUpdate(String username, String profileImage, String bio, UserCommands.Update c) {
            String Username = username;
            String ProfileImage = profileImage;
            String Bio = bio;

            ReflectUtils.invokeStaticMethod(
                    "xyz.townesquare.sc.domain.user.UpdateLogic",
                    "verify",
                    new Class[]{UserState.class, String.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), username, profileImage, bio, VerificationContext.forCommand(c)}
            );

//package xyz.townesquare.sc.domain.user;
//
//public class UpdateLogic {
//    public static void verify(UserState userState, String username, String profileImage, String bio, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected AbstractUserEvent.UserCreated newUserCreated(String username, String profileImage, String bio, Long offChainVersion, String commandId, String requesterId) {
            UserEventId eventId = new UserEventId(getState().getUserWallet(), null);
            AbstractUserEvent.UserCreated e = new AbstractUserEvent.UserCreated();

            e.setUsername(username);
            e.setProfileImage(profileImage);
            e.setBio(bio);
            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setUserEventId(eventId);
            return e;
        }

        protected AbstractUserEvent.UserUpdated newUserUpdated(String username, String profileImage, String bio, Long offChainVersion, String commandId, String requesterId) {
            UserEventId eventId = new UserEventId(getState().getUserWallet(), null);
            AbstractUserEvent.UserUpdated e = new AbstractUserEvent.UserUpdated();

            e.setUsername(username);
            e.setProfileImage(profileImage);
            e.setBio(bio);
            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setUserEventId(eventId);
            return e;
        }

    }

}

