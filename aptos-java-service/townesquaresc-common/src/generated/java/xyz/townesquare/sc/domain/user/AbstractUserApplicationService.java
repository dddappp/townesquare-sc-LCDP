// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.domain.user;

import java.util.*;
import java.util.function.Consumer;
import org.dddml.support.criterion.Criterion;
import java.math.BigInteger;
import java.util.Date;
import xyz.townesquare.sc.domain.*;
import xyz.townesquare.sc.specialization.*;

public abstract class AbstractUserApplicationService implements UserApplicationService {

    private EventStore eventStore;

    protected EventStore getEventStore()
    {
        return eventStore;
    }

    private UserStateRepository stateRepository;

    protected UserStateRepository getStateRepository() {
        return stateRepository;
    }

    private UserStateQueryRepository stateQueryRepository;

    protected UserStateQueryRepository getStateQueryRepository() {
        return stateQueryRepository;
    }

    private AggregateEventListener<UserAggregate, UserState> aggregateEventListener;

    public AggregateEventListener<UserAggregate, UserState> getAggregateEventListener() {
        return aggregateEventListener;
    }

    public void setAggregateEventListener(AggregateEventListener<UserAggregate, UserState> eventListener) {
        this.aggregateEventListener = eventListener;
    }

    public AbstractUserApplicationService(EventStore eventStore, UserStateRepository stateRepository, UserStateQueryRepository stateQueryRepository) {
        this.eventStore = eventStore;
        this.stateRepository = stateRepository;
        this.stateQueryRepository = stateQueryRepository;
    }

    public void when(UserCommands.Create c) {
        update(c, ar -> ar.create(c.getUsername(), c.getProfileImage(), c.getBio(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public void when(UserCommands.Update c) {
        update(c, ar -> ar.update(c.getUsername(), c.getProfileImage(), c.getBio(), c.getOffChainVersion(), c.getCommandId(), c.getRequesterId(), c));
    }

    public UserState get(String id) {
        UserState state = getStateRepository().get(id, true);
        return state;
    }

    public Iterable<UserState> getAll(Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getAll(firstResult, maxResults);
    }

    public Iterable<UserState> get(Iterable<Map.Entry<String, Object>> filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<UserState> get(Criterion filter, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().get(filter, orders, firstResult, maxResults);
    }

    public Iterable<UserState> getByProperty(String propertyName, Object propertyValue, List<String> orders, Integer firstResult, Integer maxResults) {
        return getStateQueryRepository().getByProperty(propertyName, propertyValue, orders, firstResult, maxResults);
    }

    public long getCount(Iterable<Map.Entry<String, Object>> filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public long getCount(Criterion filter) {
        return getStateQueryRepository().getCount(filter);
    }

    public UserEvent getEvent(String userWallet, long version) {
        UserEvent e = (UserEvent)getEventStore().getEvent(toEventStoreAggregateId(userWallet), version);
        if (e != null) {
            ((UserEvent.SqlUserEvent)e).setEventReadOnly(true); 
        } else if (version == -1) {
            return getEvent(userWallet, 0);
        }
        return e;
    }

    public UserState getHistoryState(String userWallet, long version) {
        EventStream eventStream = getEventStore().loadEventStream(AbstractUserEvent.class, toEventStoreAggregateId(userWallet), version - 1);
        return new AbstractUserState.SimpleUserState(eventStream.getEvents());
    }


    public UserAggregate getUserAggregate(UserState state) {
        return new AbstractUserAggregate.SimpleUserAggregate(state);
    }

    public EventStoreAggregateId toEventStoreAggregateId(String aggregateId) {
        return new EventStoreAggregateId.SimpleEventStoreAggregateId(aggregateId);
    }

    protected void update(UserCommand c, Consumer<UserAggregate> action) {
        String aggregateId = c.getUserWallet();
        EventStoreAggregateId eventStoreAggregateId = toEventStoreAggregateId(aggregateId);
        UserState state = getStateRepository().get(aggregateId, false);
        boolean duplicate = isDuplicateCommand(c, eventStoreAggregateId, state);
        if (duplicate) { return; }

        UserAggregate aggregate = getUserAggregate(state);
        aggregate.throwOnInvalidStateTransition(c);
        action.accept(aggregate);
        persist(eventStoreAggregateId, c.getOffChainVersion() == null ? UserState.VERSION_NULL : c.getOffChainVersion(), aggregate, state); // State version may be null!

    }

    private void persist(EventStoreAggregateId eventStoreAggregateId, long version, UserAggregate aggregate, UserState state) {
        getEventStore().appendEvents(eventStoreAggregateId, version, 
            aggregate.getChanges(), (events) -> { 
                getStateRepository().save(state); 
            });
        if (aggregateEventListener != null) {
            aggregateEventListener.eventAppended(new AggregateEvent<>(aggregate, state, aggregate.getChanges()));
        }
    }

    protected boolean isDuplicateCommand(UserCommand command, EventStoreAggregateId eventStoreAggregateId, UserState state) {
        boolean duplicate = false;
        if (command.getOffChainVersion() == null) { command.setOffChainVersion(UserState.VERSION_NULL); }
        if (state.getOffChainVersion() != null && state.getOffChainVersion() > command.getOffChainVersion()) {
            Event lastEvent = getEventStore().getEvent(AbstractUserEvent.class, eventStoreAggregateId, command.getOffChainVersion());
            if (lastEvent != null && lastEvent instanceof AbstractEvent
               && command.getCommandId() != null && command.getCommandId().equals(((AbstractEvent) lastEvent).getCommandId())) {
                duplicate = true;
            }
        }
        return duplicate;
    }

    public static class SimpleUserApplicationService extends AbstractUserApplicationService {
        public SimpleUserApplicationService(EventStore eventStore, UserStateRepository stateRepository, UserStateQueryRepository stateQueryRepository)
        {
            super(eventStore, stateRepository, stateQueryRepository);
        }
    }

}

