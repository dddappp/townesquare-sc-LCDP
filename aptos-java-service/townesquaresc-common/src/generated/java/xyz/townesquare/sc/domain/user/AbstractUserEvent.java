// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.domain.user;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import xyz.townesquare.sc.domain.*;
import xyz.townesquare.sc.specialization.*;
import xyz.townesquare.sc.domain.AbstractEvent;

public abstract class AbstractUserEvent extends AbstractEvent implements UserEvent.SqlUserEvent, AptosEvent.MutableAptosEvent, HasStatus.MutableHasStatus {
    private UserEventId userEventId = new UserEventId();

    public UserEventId getUserEventId() {
        return this.userEventId;
    }

    public void setUserEventId(UserEventId eventId) {
        this.userEventId = eventId;
    }
    
    public String getUserWallet() {
        return getUserEventId().getUserWallet();
    }

    public void setUserWallet(String userWallet) {
        getUserEventId().setUserWallet(userWallet);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getUserEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getUserEventId().setVersion(version);
    }

    private BigInteger aptosEventVersion;

    public BigInteger getAptosEventVersion() {
        return this.aptosEventVersion;
    }
    
    public void setAptosEventVersion(BigInteger aptosEventVersion) {
        this.aptosEventVersion = aptosEventVersion;
    }

    private BigInteger aptosEventSequenceNumber;

    public BigInteger getAptosEventSequenceNumber() {
        return this.aptosEventSequenceNumber;
    }
    
    public void setAptosEventSequenceNumber(BigInteger aptosEventSequenceNumber) {
        this.aptosEventSequenceNumber = aptosEventSequenceNumber;
    }

    private String aptosEventType;

    public String getAptosEventType() {
        return this.aptosEventType;
    }
    
    public void setAptosEventType(String aptosEventType) {
        this.aptosEventType = aptosEventType;
    }

    private AptosEventGuid aptosEventGuid;

    public AptosEventGuid getAptosEventGuid() {
        return this.aptosEventGuid;
    }
    
    public void setAptosEventGuid(AptosEventGuid aptosEventGuid) {
        this.aptosEventGuid = aptosEventGuid;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractUserEvent() {
    }

    protected AbstractUserEvent(UserEventId eventId) {
        this.userEventId = eventId;
    }


    public abstract String getEventClass();

    public static class UserClobEvent extends  AbstractUserEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventClass() {
            return "UserClobEvent";
        }

    }

    public static class UserCreated extends UserClobEvent {

        @Override
        public String getEventClass() {
            return "UserCreated";
        }

        public String getUsername() {
            Object val = getDynamicProperties().get("username");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setUsername(String value) {
            getDynamicProperties().put("username", value);
        }

        public String getProfileImage() {
            Object val = getDynamicProperties().get("profileImage");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProfileImage(String value) {
            getDynamicProperties().put("profileImage", value);
        }

        public String getBio() {
            Object val = getDynamicProperties().get("bio");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBio(String value) {
            getDynamicProperties().put("bio", value);
        }

    }

    public static class UserUpdated extends UserClobEvent {

        @Override
        public String getEventClass() {
            return "UserUpdated";
        }

        public String getUsername() {
            Object val = getDynamicProperties().get("username");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setUsername(String value) {
            getDynamicProperties().put("username", value);
        }

        public String getProfileImage() {
            Object val = getDynamicProperties().get("profileImage");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setProfileImage(String value) {
            getDynamicProperties().put("profileImage", value);
        }

        public String getBio() {
            Object val = getDynamicProperties().get("bio");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBio(String value) {
            getDynamicProperties().put("bio", value);
        }

    }


}

