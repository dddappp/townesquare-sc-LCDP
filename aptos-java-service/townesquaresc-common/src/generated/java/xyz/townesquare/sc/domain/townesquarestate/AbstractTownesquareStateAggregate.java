// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.domain.townesquarestate;

import java.util.*;
import java.util.Date;
import java.math.BigInteger;
import xyz.townesquare.sc.domain.*;
import xyz.townesquare.sc.specialization.*;

public abstract class AbstractTownesquareStateAggregate extends AbstractAggregate implements TownesquareStateAggregate {
    private TownesquareStateState.MutableTownesquareStateState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractTownesquareStateAggregate(TownesquareStateState state) {
        this.state = (TownesquareStateState.MutableTownesquareStateState)state;
    }

    public TownesquareStateState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        TownesquareStateCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleTownesquareStateAggregate extends AbstractTownesquareStateAggregate {
        public SimpleTownesquareStateAggregate(TownesquareStateState state) {
            super(state);
        }

        @Override
        public void create(Boolean isEmergency, String userAdmin, String postAdmin, Long offChainVersion, String commandId, String requesterId, TownesquareStateCommands.Create c) {
            try {
                verifyCreate(isEmergency, userAdmin, postAdmin, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newTownesquareStateCreated(isEmergency, userAdmin, postAdmin, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void update(Boolean isEmergency, String userAdmin, String postAdmin, Long offChainVersion, String commandId, String requesterId, TownesquareStateCommands.Update c) {
            try {
                verifyUpdate(isEmergency, userAdmin, postAdmin, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newTownesquareStateUpdated(isEmergency, userAdmin, postAdmin, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void delete(Long offChainVersion, String commandId, String requesterId, TownesquareStateCommands.Delete c) {
            try {
                verifyDelete(c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newTownesquareStateDeleted(offChainVersion, commandId, requesterId);
            apply(e);
        }

        protected void verifyCreate(Boolean isEmergency, String userAdmin, String postAdmin, TownesquareStateCommands.Create c) {
            Boolean IsEmergency = isEmergency;
            String UserAdmin = userAdmin;
            String PostAdmin = postAdmin;

            ReflectUtils.invokeStaticMethod(
                    "xyz.townesquare.sc.domain.townesquarestate.CreateLogic",
                    "verify",
                    new Class[]{TownesquareStateState.class, Boolean.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), isEmergency, userAdmin, postAdmin, VerificationContext.forCommand(c)}
            );

//package xyz.townesquare.sc.domain.townesquarestate;
//
//public class CreateLogic {
//    public static void verify(TownesquareStateState townesquareStateState, Boolean isEmergency, String userAdmin, String postAdmin, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyUpdate(Boolean isEmergency, String userAdmin, String postAdmin, TownesquareStateCommands.Update c) {
            Boolean IsEmergency = isEmergency;
            String UserAdmin = userAdmin;
            String PostAdmin = postAdmin;

            ReflectUtils.invokeStaticMethod(
                    "xyz.townesquare.sc.domain.townesquarestate.UpdateLogic",
                    "verify",
                    new Class[]{TownesquareStateState.class, Boolean.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), isEmergency, userAdmin, postAdmin, VerificationContext.forCommand(c)}
            );

//package xyz.townesquare.sc.domain.townesquarestate;
//
//public class UpdateLogic {
//    public static void verify(TownesquareStateState townesquareStateState, Boolean isEmergency, String userAdmin, String postAdmin, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyDelete(TownesquareStateCommands.Delete c) {

            ReflectUtils.invokeStaticMethod(
                    "xyz.townesquare.sc.domain.townesquarestate.DeleteLogic",
                    "verify",
                    new Class[]{TownesquareStateState.class, VerificationContext.class},
                    new Object[]{getState(), VerificationContext.forCommand(c)}
            );

//package xyz.townesquare.sc.domain.townesquarestate;
//
//public class DeleteLogic {
//    public static void verify(TownesquareStateState townesquareStateState, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected AbstractTownesquareStateEvent.TownesquareStateCreated newTownesquareStateCreated(Boolean isEmergency, String userAdmin, String postAdmin, Long offChainVersion, String commandId, String requesterId) {
            TownesquareStateEventId eventId = new TownesquareStateEventId(getState().getAccountAddress(), null);
            AbstractTownesquareStateEvent.TownesquareStateCreated e = new AbstractTownesquareStateEvent.TownesquareStateCreated();

            e.setIsEmergency(isEmergency);
            e.setUserAdmin(userAdmin);
            e.setPostAdmin(postAdmin);
            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTownesquareStateEventId(eventId);
            return e;
        }

        protected AbstractTownesquareStateEvent.TownesquareStateUpdated newTownesquareStateUpdated(Boolean isEmergency, String userAdmin, String postAdmin, Long offChainVersion, String commandId, String requesterId) {
            TownesquareStateEventId eventId = new TownesquareStateEventId(getState().getAccountAddress(), null);
            AbstractTownesquareStateEvent.TownesquareStateUpdated e = new AbstractTownesquareStateEvent.TownesquareStateUpdated();

            e.setIsEmergency(isEmergency);
            e.setUserAdmin(userAdmin);
            e.setPostAdmin(postAdmin);
            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTownesquareStateEventId(eventId);
            return e;
        }

        protected AbstractTownesquareStateEvent.TownesquareStateDeleted newTownesquareStateDeleted(Long offChainVersion, String commandId, String requesterId) {
            TownesquareStateEventId eventId = new TownesquareStateEventId(getState().getAccountAddress(), null);
            AbstractTownesquareStateEvent.TownesquareStateDeleted e = new AbstractTownesquareStateEvent.TownesquareStateDeleted();

            e.setAptosEventVersion(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventSequenceNumber(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventType(null); // todo Need to update 'verify' method to return event properties.
            e.setAptosEventGuid(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setTownesquareStateEventId(eventId);
            return e;
        }

    }

}

