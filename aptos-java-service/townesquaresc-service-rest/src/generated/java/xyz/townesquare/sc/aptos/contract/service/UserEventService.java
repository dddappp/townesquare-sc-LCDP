// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.aptos.contract.service;

import com.github.wubuku.aptos.bean.Event;
import com.github.wubuku.aptos.utils.NodeApiClient;

import xyz.townesquare.sc.domain.user.AbstractUserEvent;
import xyz.townesquare.sc.aptos.contract.ContractConstants;
import xyz.townesquare.sc.aptos.contract.DomainBeanUtils;
import xyz.townesquare.sc.aptos.contract.AptosAccount;

import xyz.townesquare.sc.aptos.contract.user.UserCreated;
import xyz.townesquare.sc.aptos.contract.user.UserUpdated;
import xyz.townesquare.sc.aptos.contract.repository.UserEventRepository;
import xyz.townesquare.sc.aptos.contract.repository.AptosAccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.*;
import java.util.*;


@Service
public class UserEventService {

    @Value("${aptos.contract.address}")
    private String aptosContractAddress;

    @Autowired
    private AptosAccountRepository aptosAccountRepository;

    @Autowired
    private NodeApiClient aptosNodeApiClient;

    @Autowired
    private UserEventRepository userEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractUserEvent event) {
        event.setStatus("D");
        userEventRepository.save(event);
    }

    @Transactional
    public void pullUserCreatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getUserCreatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<UserCreated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.USER_MODULE_EVENTS,
                        ContractConstants.USER_MODULE_USER_CREATED_HANDLE_FIELD,
                        UserCreated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<UserCreated> eventEnvelope : eventPage) {
                    saveUserCreated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getUserCreatedEventNextCursor() {
        AbstractUserEvent.UserCreated lastEvent = userEventRepository.findFirstUserCreatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveUserCreated(Event<UserCreated> eventEnvelope) {
        AbstractUserEvent.UserCreated userCreated = DomainBeanUtils.toUserCreated(eventEnvelope);
        if (userEventRepository.findById(userCreated.getUserEventId()).isPresent()) {
            return;
        }
        userEventRepository.save(userCreated);
    }

    @Transactional
    public void pullUserUpdatedEvents() {
        String resourceAccountAddress = getResourceAccountAddress();
        if (resourceAccountAddress == null) {
            return;
        }
        int limit = 1;
        BigInteger cursor = getUserUpdatedEventNextCursor();
        if (cursor == null) {
            cursor = BigInteger.ZERO;
        }
        while (true) {
            List<Event<UserUpdated>> eventPage;
            try {
                eventPage = aptosNodeApiClient.getEventsByEventHandle(
                        resourceAccountAddress,
                        this.aptosContractAddress + "::" + ContractConstants.USER_MODULE_EVENTS,
                        ContractConstants.USER_MODULE_USER_UPDATED_HANDLE_FIELD,
                        UserUpdated.class,
                        cursor.longValue(),
                        limit
                );
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            if (eventPage != null && eventPage.size() > 0) {
                cursor = cursor.add(BigInteger.ONE);
                for (Event<UserUpdated> eventEnvelope : eventPage) {
                    saveUserUpdated(eventEnvelope);
                }
            } else {
                break;
            }
        }
    }

    private BigInteger getUserUpdatedEventNextCursor() {
        AbstractUserEvent.UserUpdated lastEvent = userEventRepository.findFirstUserUpdatedByOrderByAptosEventSequenceNumber();
        return lastEvent != null ? lastEvent.getAptosEventSequenceNumber() : null;
    }

    private void saveUserUpdated(Event<UserUpdated> eventEnvelope) {
        AbstractUserEvent.UserUpdated userUpdated = DomainBeanUtils.toUserUpdated(eventEnvelope);
        if (userEventRepository.findById(userUpdated.getUserEventId()).isPresent()) {
            return;
        }
        userEventRepository.save(userUpdated);
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }
}
