// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.aptos.contract.service;


import com.github.wubuku.aptos.bean.AccountResource;
import com.github.wubuku.aptos.utils.*;
import xyz.townesquare.sc.aptos.contract.AptosAccount;
import xyz.townesquare.sc.aptos.contract.ContractConstants;
import xyz.townesquare.sc.aptos.contract.DomainBeanUtils;
import xyz.townesquare.sc.aptos.contract.repository.AptosAccountRepository;
import xyz.townesquare.sc.domain.user.*;
import xyz.townesquare.sc.domain.*;
import xyz.townesquare.sc.aptos.contract.User;

import java.io.IOException;
import java.math.*;
import java.util.*;
import java.util.function.*;


public class AptosUserStateRetriever {

    private NodeApiClient aptosNodeApiClient;

    private String aptosContractAddress;

    private AptosAccountRepository aptosAccountRepository;

    private Function<String, UserState.MutableUserState> userStateFactory;


    public AptosUserStateRetriever(NodeApiClient aptosNodeApiClient,
                                    String aptosContractAddress,
                                    AptosAccountRepository aptosAccountRepository,
                                    Function<String, UserState.MutableUserState> userStateFactory
    ) {
        this.aptosNodeApiClient = aptosNodeApiClient;
        this.aptosContractAddress = aptosContractAddress;
        this.aptosAccountRepository = aptosAccountRepository;
        this.userStateFactory = userStateFactory;
    }

    public UserState retrieveUserState(String userWallet) {
        String resourceAccountAddress = getResourceAccountAddress();
        AccountResource<User.Tables> accountResource;
        try {
            accountResource = aptosNodeApiClient.getAccountResource(resourceAccountAddress,
                    this.aptosContractAddress + "::" + ContractConstants.USER_MODULE_TABLES,
                    User.Tables.class,
                    null);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        String tableHandle = accountResource.getData().getUserTable().getHandle();
        User user;
        try {
            user = aptosNodeApiClient.getTableItem(
                    tableHandle,
                    ContractConstants.toNumericalAddressType(ContractConstants.USER_ID_TYPE, this.aptosContractAddress),
                    this.aptosContractAddress + "::" + ContractConstants.USER_MODULE_USER,
                    userWallet,
                    User.class,
                    null
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return toUserState(user);
    }

    private UserState toUserState(User user) {
        UserState.MutableUserState userState = userStateFactory.apply(user.getUserWallet());
        userState.setVersion(user.getVersion());
        userState.setUsername(user.getUsername());
        userState.setProfileImage(user.getProfileImage());
        userState.setBio(user.getBio());
        return userState;
    }

    private String getResourceAccountAddress() {
        return aptosAccountRepository.findById(ContractConstants.RESOURCE_ACCOUNT_ADDRESS)
                .map(AptosAccount::getAddress).orElse(null);
    }

}

