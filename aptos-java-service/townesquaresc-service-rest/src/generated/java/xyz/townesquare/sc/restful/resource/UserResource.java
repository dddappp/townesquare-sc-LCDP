// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package xyz.townesquare.sc.restful.resource;

import java.util.*;
import java.util.stream.*;
import javax.servlet.http.*;
import javax.validation.constraints.*;
import org.springframework.http.MediaType;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.dddml.support.criterion.*;
import java.math.BigInteger;
import java.util.Date;
import xyz.townesquare.sc.domain.*;
import xyz.townesquare.sc.specialization.*;
import xyz.townesquare.sc.domain.user.*;
import static xyz.townesquare.sc.domain.meta.M.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.dddml.support.criterion.TypeConverter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RequestMapping(path = "Users", produces = MediaType.APPLICATION_JSON_VALUE)
@RestController
public class UserResource {
    private Logger logger = LoggerFactory.getLogger(this.getClass());


    @Autowired
    private UserApplicationService userApplicationService;


    /**
     * Retrieve.
     * Retrieve Users
     */
    @GetMapping
    @Transactional(readOnly = true)
    public UserStateDto[] getAll( HttpServletRequest request,
                    @RequestParam(value = "sort", required = false) String sort,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "firstResult", defaultValue = "0") Integer firstResult,
                    @RequestParam(value = "maxResults", defaultValue = "2147483647") Integer maxResults,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
        if (firstResult < 0) { firstResult = 0; }
        if (maxResults == null || maxResults < 1) { maxResults = Integer.MAX_VALUE; }

            Iterable<UserState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> UserResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (UserMetadata.aliasMap.containsKey(n) ? UserMetadata.aliasMap.get(n) : n));
            states = userApplicationService.get(
                c,
                UserResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);

            UserStateDto.DtoConverter dtoConverter = new UserStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toUserStateDtoArray(states);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve in pages.
     * Retrieve Users in pages.
     */
    @GetMapping("_page")
    @Transactional(readOnly = true)
    public Page<UserStateDto> getPage( HttpServletRequest request,
                    @RequestParam(value = "fields", required = false) String fields,
                    @RequestParam(value = "page", defaultValue = "0") Integer page,
                    @RequestParam(value = "size", defaultValue = "20") Integer size,
                    @RequestParam(value = "filter", required = false) String filter) {
        try {
            Integer firstResult = (page == null ? 0 : page) * (size == null ? 20 : size);
            Integer maxResults = (size == null ? 20 : size);
            Iterable<UserState> states = null; 
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap().entrySet().stream()
                    .filter(kv -> UserResourceUtils.getFilterPropertyName(kv.getKey()) != null)
                    .collect(Collectors.toMap(kv -> kv.getKey(), kv -> kv.getValue())));
            }
            Criterion c = CriterionDto.toSubclass(criterion, getCriterionTypeConverter(), getPropertyTypeResolver(), 
                n -> (UserMetadata.aliasMap.containsKey(n) ? UserMetadata.aliasMap.get(n) : n));
            states = userApplicationService.get(
                c,
                UserResourceUtils.getQuerySorts(request.getParameterMap()),
                firstResult, maxResults);
            long count = userApplicationService.getCount(c);

            UserStateDto.DtoConverter dtoConverter = new UserStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            Page.PageImpl<UserStateDto> statePage =  new Page.PageImpl<>(dtoConverter.toUserStateDtoList(states), count);
            statePage.setSize(size);
            statePage.setNumber(page);
            return statePage;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    /**
     * Retrieve.
     * Retrieves User with the specified ID.
     */
    @GetMapping("{userWallet}")
    @Transactional(readOnly = true)
    public UserStateDto get(@PathVariable("userWallet") String userWallet, @RequestParam(value = "fields", required = false) String fields) {
        try {
            String idObj = userWallet;
            UserState state = userApplicationService.get(idObj);
            if (state == null) { return null; }

            UserStateDto.DtoConverter dtoConverter = new UserStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toUserStateDto(state);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_count")
    @Transactional(readOnly = true)
    public long getCount( HttpServletRequest request,
                         @RequestParam(value = "filter", required = false) String filter) {
        try {
            long count = 0;
            CriterionDto criterion = null;
            if (!StringHelper.isNullOrEmpty(filter)) {
                criterion = new ObjectMapper().readValue(filter, CriterionDto.class);
            } else {
                criterion = QueryParamUtils.getQueryCriterionDto(request.getParameterMap());
            }
            Criterion c = CriterionDto.toSubclass(criterion,
                getCriterionTypeConverter(), 
                getPropertyTypeResolver(), 
                n -> (UserMetadata.aliasMap.containsKey(n) ? UserMetadata.aliasMap.get(n) : n));
            count = userApplicationService.getCount(c);
            return count;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{userWallet}/_commands/Create")
    public void create(@PathVariable("userWallet") String userWallet, @RequestBody UserCommands.Create content) {
        try {

            UserCommands.Create cmd = content;//.toCreate();
            String idObj = userWallet;
            if (cmd.getUserWallet() == null) {
                cmd.setUserWallet(idObj);
            } else if (!cmd.getUserWallet().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", userWallet, cmd.getUserWallet());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            userApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }


    @PutMapping("{userWallet}/_commands/Update")
    public void update(@PathVariable("userWallet") String userWallet, @RequestBody UserCommands.Update content) {
        try {

            UserCommands.Update cmd = content;//.toUpdate();
            String idObj = userWallet;
            if (cmd.getUserWallet() == null) {
                cmd.setUserWallet(idObj);
            } else if (!cmd.getUserWallet().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", userWallet, cmd.getUserWallet());
            }
            cmd.setRequesterId(SecurityContextUtil.getRequesterId());
            userApplicationService.when(cmd);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("_metadata/filteringFields")
    public List<PropertyMetadataDto> getMetadataFilteringFields() {
        try {

            List<PropertyMetadataDto> filtering = new ArrayList<>();
            UserMetadata.propertyTypeMap.forEach((key, value) -> {
                filtering.add(new PropertyMetadataDto(key, value, true));
            });
            return filtering;

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{userWallet}/_events/{version}")
    @Transactional(readOnly = true)
    public UserEvent getEvent(@PathVariable("userWallet") String userWallet, @PathVariable("version") long version) {
        try {

            String idObj = userWallet;
            //UserStateEventDtoConverter dtoConverter = getUserStateEventDtoConverter();
            return userApplicationService.getEvent(idObj, version);

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }

    @GetMapping("{userWallet}/_historyStates/{version}")
    @Transactional(readOnly = true)
    public UserStateDto getHistoryState(@PathVariable("userWallet") String userWallet, @PathVariable("version") long version, @RequestParam(value = "fields", required = false) String fields) {
        try {

            String idObj = userWallet;
            UserStateDto.DtoConverter dtoConverter = new UserStateDto.DtoConverter();
            if (StringHelper.isNullOrEmpty(fields)) {
                dtoConverter.setAllFieldsReturned(true);
            } else {
                dtoConverter.setReturnedFieldsString(fields);
            }
            return dtoConverter.toUserStateDto(userApplicationService.getHistoryState(idObj, version));

        } catch (Exception ex) { logger.info(ex.getMessage(), ex); throw DomainErrorUtils.convertException(ex); }
    }



    //protected  UserStateEventDtoConverter getUserStateEventDtoConverter() {
    //    return new UserStateEventDtoConverter();
    //}

    protected TypeConverter getCriterionTypeConverter() {
        return new DefaultTypeConverter();
    }

    protected PropertyTypeResolver getPropertyTypeResolver() {
        return new PropertyTypeResolver() {
            @Override
            public Class resolveTypeByPropertyName(String propertyName) {
                return UserResourceUtils.getFilterPropertyType(propertyName);
            }
        };
    }

    // ////////////////////////////////
 
    public static class UserResourceUtils {

        public static void setNullIdOrThrowOnInconsistentIds(String userWallet, UserCommand value) {
            String idObj = userWallet;
            if (value.getUserWallet() == null) {
                value.setUserWallet(idObj);
            } else if (!value.getUserWallet().equals(idObj)) {
                throw DomainError.named("inconsistentId", "Argument Id %1$s NOT equals body Id %2$s", userWallet, value.getUserWallet());
            }
        }
    
        public static List<String> getQueryOrders(String str, String separator) {
            return QueryParamUtils.getQueryOrders(str, separator, UserMetadata.aliasMap);
        }

        public static List<String> getQuerySorts(Map<String, String[]> queryNameValuePairs) {
            String[] values = queryNameValuePairs.get("sort");
            return QueryParamUtils.getQuerySorts(values, UserMetadata.aliasMap);
        }

        public static String getFilterPropertyName(String fieldName) {
            if ("sort".equalsIgnoreCase(fieldName)
                    || "firstResult".equalsIgnoreCase(fieldName)
                    || "maxResults".equalsIgnoreCase(fieldName)
                    || "fields".equalsIgnoreCase(fieldName)) {
                return null;
            }
            if (UserMetadata.aliasMap.containsKey(fieldName)) {
                return UserMetadata.aliasMap.get(fieldName);
            }
            return null;
        }

        public static Class getFilterPropertyType(String propertyName) {
            if (UserMetadata.propertyTypeMap.containsKey(propertyName)) {
                String propertyType = UserMetadata.propertyTypeMap.get(propertyName);
                if (!StringHelper.isNullOrEmpty(propertyType)) {
                    if (BoundedContextMetadata.CLASS_MAP.containsKey(propertyType)) {
                        return BoundedContextMetadata.CLASS_MAP.get(propertyType);
                    }
                }
            }
            return String.class;
        }

        public static Iterable<Map.Entry<String, Object>> getQueryFilterMap(Map<String, String[]> queryNameValuePairs) {
            Map<String, Object> filter = new HashMap<>();
            queryNameValuePairs.forEach((key, values) -> {
                if (values.length > 0) {
                    String pName = getFilterPropertyName(key);
                    if (!StringHelper.isNullOrEmpty(pName)) {
                        Class pClass = getFilterPropertyType(pName);
                        filter.put(pName, ApplicationContext.current.getTypeConverter().convertFromString(pClass, values[0]));
                    }
                }
            });
            return filter.entrySet();
        }

        public static UserStateDto[] toUserStateDtoArray(Iterable<String> ids) {
            List<UserStateDto> states = new ArrayList<>();
            ids.forEach(i -> {
                UserStateDto dto = new UserStateDto();
                dto.setUserWallet(i);
                states.add(dto);
            });
            return states.toArray(new UserStateDto[0]);
        }

    }

}

