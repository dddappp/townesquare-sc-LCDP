// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module townesquare_sc::post {
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_std::table::{Self, Table};
    use std::string::String;
    use townesquare_sc::genesis_account;
    use townesquare_sc::pass_object;
    friend townesquare_sc::post_create_logic;
    friend townesquare_sc::post_update_logic;
    friend townesquare_sc::post_delete_logic;
    friend townesquare_sc::post_aggregate;

    const EDATA_TOO_LONG: u64 = 102;
    const EINAPPROPRIATE_VERSION: u64 = 103;
    const ENOT_INITIALIZED: u64 = 110;

    struct Events has key {
        // post_id_generator_created_handle: event::EventHandle<PostIdGeneratorCreated>,
        post_created_handle: event::EventHandle<PostCreated>,
        post_updated_handle: event::EventHandle<PostUpdated>,
        post_deleted_handle: event::EventHandle<PostDeleted>,
    }

    struct Tables has key {
        post_table: Table<u128, Post>,
    }

    struct PostIdGenerator has key {
        sequence: u128,
    }


    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            // post_id_generator_created_handle: account::new_event_handle<PostIdGeneratorCreated>(&res_account),
            post_created_handle: account::new_event_handle<PostCreated>(&res_account),
            post_updated_handle: account::new_event_handle<PostUpdated>(&res_account),
            post_deleted_handle: account::new_event_handle<PostDeleted>(&res_account),
        });

        let post_id_generator = PostIdGenerator {
            sequence: 0,
        };
        move_to(&res_account, post_id_generator);
        // let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        // event::emit_event(&mut events.post_id_generator_created_handle, PostIdGeneratorCreated {
        // });

        move_to(
            &res_account,
            Tables {
                post_table: table::new(),
            },
        );

    }

    struct Post has store {
        post_id: u128,
        version: u64,
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    }

    public fun post_id(post: &Post): u128 {
        post.post_id
    }

    public fun version(post: &Post): u64 {
        post.version
    }

    public fun poster(post: &Post): address {
        post.poster
    }

    public(friend) fun set_poster(post: &mut Post, poster: address) {
        post.poster = poster;
    }

    public fun user_id(post: &Post): String {
        post.user_id
    }

    public(friend) fun set_user_id(post: &mut Post, user_id: String) {
        assert!(std::string::length(&user_id) <= 66, EDATA_TOO_LONG);
        post.user_id = user_id;
    }

    public fun content(post: &Post): String {
        post.content
    }

    public(friend) fun set_content(post: &mut Post, content: String) {
        assert!(std::string::length(&content) <= 1000, EDATA_TOO_LONG);
        post.content = content;
    }

    public fun digest(post: &Post): String {
        post.digest
    }

    public(friend) fun set_digest(post: &mut Post, digest: String) {
        assert!(std::string::length(&digest) <= 66, EDATA_TOO_LONG);
        post.digest = digest;
    }

    fun new_post(
        post_id: u128,
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    ): Post {
        assert!(std::string::length(&user_id) <= 66, EDATA_TOO_LONG);
        assert!(std::string::length(&content) <= 1000, EDATA_TOO_LONG);
        assert!(std::string::length(&digest) <= 66, EDATA_TOO_LONG);
        Post {
            post_id,
            version: 0,
            poster,
            user_id,
            content,
            digest,
        }
    }

    struct PostCreated has store, drop {
        post_id: u128,
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    }

    public fun post_created_post_id(post_created: &PostCreated): u128 {
        post_created.post_id
    }

    public fun post_created_poster(post_created: &PostCreated): address {
        post_created.poster
    }

    public fun post_created_user_id(post_created: &PostCreated): String {
        post_created.user_id
    }

    public fun post_created_content(post_created: &PostCreated): String {
        post_created.content
    }

    public fun post_created_digest(post_created: &PostCreated): String {
        post_created.digest
    }

    public(friend) fun new_post_created(
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    ): PostCreated acquires PostIdGenerator {
        assert!(exists<PostIdGenerator>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let post_id_generator = borrow_global_mut<PostIdGenerator>(genesis_account::resouce_account_address());
        let post_id = next_post_id(post_id_generator);
        PostCreated {
            post_id,
            poster,
            user_id,
            content,
            digest,
        }
    }

    struct PostUpdated has store, drop {
        post_id: u128,
        version: u64,
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    }

    public fun post_updated_post_id(post_updated: &PostUpdated): u128 {
        post_updated.post_id
    }

    public fun post_updated_poster(post_updated: &PostUpdated): address {
        post_updated.poster
    }

    public fun post_updated_user_id(post_updated: &PostUpdated): String {
        post_updated.user_id
    }

    public fun post_updated_content(post_updated: &PostUpdated): String {
        post_updated.content
    }

    public fun post_updated_digest(post_updated: &PostUpdated): String {
        post_updated.digest
    }

    public(friend) fun new_post_updated(
        post: &Post,
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    ): PostUpdated {
        PostUpdated {
            post_id: post_id(post),
            version: version(post),
            poster,
            user_id,
            content,
            digest,
        }
    }

    struct PostDeleted has store, drop {
        post_id: u128,
        version: u64,
    }

    public fun post_deleted_post_id(post_deleted: &PostDeleted): u128 {
        post_deleted.post_id
    }

    public(friend) fun new_post_deleted(
        post: &Post,
    ): PostDeleted {
        PostDeleted {
            post_id: post_id(post),
            version: version(post),
        }
    }


    public(friend) fun create_post(
        poster: address,
        user_id: String,
        content: String,
        digest: String,
    ): Post acquires PostIdGenerator {
        assert!(exists<PostIdGenerator>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let post_id_generator = borrow_global<PostIdGenerator>(genesis_account::resouce_account_address());
        let post_id = current_post_id(post_id_generator);
        let post = new_post(
            post_id,
            poster,
            user_id,
            content,
            digest,
        );
        post
    }

    fun current_post_id(
        post_id_generator: &PostIdGenerator,
    ): u128 {
        post_id_generator.sequence
    }

    fun next_post_id(
        post_id_generator: &mut PostIdGenerator,
    ): u128 {
        post_id_generator.sequence = post_id_generator.sequence + 1;
        current_post_id(post_id_generator)
    }

    public(friend) fun update_version_and_add(post: Post) acquires Tables {
        post.version = post.version + 1;
        //assert!(post.version != 0, EINAPPROPRIATE_VERSION);
        private_add_post(post);
    }

    public(friend) fun add_post(post: Post) acquires Tables {
        assert!(post.version == 0, EINAPPROPRIATE_VERSION);
        private_add_post(post);
    }

    public(friend) fun remove_post(post_id: u128): Post acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::remove(&mut tables.post_table, post_id)
    }

    fun private_add_post(post: Post) acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::add(&mut tables.post_table, post_id(&post), post);
    }

    public fun get_post(post_id: u128): pass_object::PassObject<Post> acquires Tables {
        let post = remove_post(post_id);
        pass_object::new(post)
    }

    public fun return_post(post_pass_obj: pass_object::PassObject<Post>) acquires Tables {
        let post = pass_object::extract(post_pass_obj);
        private_add_post(post);
    }

    public(friend) fun drop_post(post: Post) {
        let Post {
            version: _version,
            post_id: _post_id,
            poster: _poster,
            user_id: _user_id,
            content: _content,
            digest: _digest,
        } = post;
    }

    public(friend) fun emit_post_created(post_created: PostCreated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.post_created_handle, post_created);
    }

    public(friend) fun emit_post_updated(post_updated: PostUpdated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.post_updated_handle, post_updated);
    }

    public(friend) fun emit_post_deleted(post_deleted: PostDeleted) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.post_deleted_handle, post_deleted);
    }

}
